import { useState, useCallback, useEffect, useMemo } from 'react'
import { TIMING } from '@constants/constant'

import { QuizCallbacks } from './useQuizLogic'

// ÌÉÄÏûÖ Ï†ïÏùò
export interface CardItem {
  id: string
  uppercase: string
  lowercase: string
  isFlipped: boolean
  isMatched: boolean
}

export interface CardMatchingOptions {
  showDuration?: number
}

export type GamePhase = 'showing' | 'playing' | 'completed'

export interface UseCardMatchingLogicReturn {
  cards: CardItem[]
  selectedCards: CardItem[]
  gamePhase: GamePhase
  matchedPairs: number
  totalPairs: number
  isCompleted: boolean
  handleCardClick: (cardId: string) => void
}

/**
 * Ïπ¥Îìú Îß§Ïπ≠ Í≤åÏûÑ Î°úÏßÅÏùÑ Í¥ÄÎ¶¨ÌïòÎäî Ïª§Ïä§ÌÖÄ ÌõÖ
 */
export function useCardMatchingLogic(
  cardPairs: { uppercase: string; lowercase: string }[],
  callbacks: QuizCallbacks,
  options: CardMatchingOptions = {},
): UseCardMatchingLogicReturn {
  const { showDuration = TIMING.CARD_MATCHING.SHOW_DURATION } = options
  const { onCorrect, onIncorrect, onComplete } = callbacks

  // Ïπ¥Îìú Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî
  const initialCards = useMemo(() => {
    const allCards: CardItem[] = []

    cardPairs.forEach((pair, index) => {
      // ÏïûÎ©¥ Ïπ¥Îìú (ÎåÄÎ¨∏Ïûê)
      allCards.push({
        id: `front-${index}`,
        uppercase: pair.uppercase,
        lowercase: pair.lowercase,
        isFlipped: true,
        isMatched: false,
      })

      // Îí∑Î©¥ Ïπ¥Îìú (ÏÜåÎ¨∏Ïûê)
      allCards.push({
        id: `back-${index}`,
        uppercase: pair.uppercase,
        lowercase: pair.lowercase,
        isFlipped: true,
        isMatched: false,
      })
    })

    // Fisher-Yates ÏÖîÌîå
    for (let i = allCards.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1))
      ;[allCards[i], allCards[j]] = [allCards[j], allCards[i]]
    }

    return allCards
  }, [cardPairs])

  // ÏÉÅÌÉú Í¥ÄÎ¶¨
  const [cards, setCards] = useState<CardItem[]>(initialCards)
  const [selectedCards, setSelectedCards] = useState<CardItem[]>([])
  const [gamePhase, setGamePhase] = useState<GamePhase>('showing')
  const [matchedPairs, setMatchedPairs] = useState(0)

  const totalPairs = cardPairs.length
  const isCompleted = matchedPairs === totalPairs

  // Îß§Ïπ≠ ÏßÑÌñâ ÏÉÅÌô© Î°úÍ∑∏
  useEffect(() => {
    console.log(`Îß§Ïπ≠Îêú Ïåç: ${matchedPairs}/${totalPairs}`)
    if (isCompleted) {
      console.log('üéâ Î™®Îì† ÏåçÏù¥ Îß§Ïπ≠ÎêòÏóàÏäµÎãàÎã§!')
    }
  }, [matchedPairs, totalPairs, isCompleted])

  // Ï¥àÍ∏∞ Ïπ¥Îìú Î≥¥Ïó¨Ï£ºÍ∏∞ ÌõÑ Îí§ÏßëÍ∏∞
  useEffect(() => {
    if (gamePhase === 'showing') {
      const timer = setTimeout(() => {
        setCards((prev) => prev.map((card) => ({ ...card, isFlipped: false })))
        setGamePhase('playing')
        console.log('Ïπ¥Îìú Í≤åÏûÑ ÏãúÏûë: Î™®Îì† Ïπ¥ÎìúÎ•º Îí§ÏßëÏóàÏäµÎãàÎã§')
      }, showDuration)

      return () => clearTimeout(timer)
    }
  }, [gamePhase, showDuration])

  // Í≤åÏûÑ ÏôÑÎ£å Ï≤òÎ¶¨
  useEffect(() => {
    if (isCompleted) {
      console.log('üéØ Í≤åÏûÑ ÏôÑÎ£å Í∞êÏßÄ! onComplete Ìò∏Ï∂ú ÏòàÏ†ï:', {
        matchedPairs,
        totalPairs,
        delay: TIMING.CARD_MATCHING.COMPLETE_DELAY,
      })

      const timer = setTimeout(() => {
        console.log('üéâ onComplete() Ìò∏Ï∂ú!')
        onComplete?.()
      }, TIMING.CARD_MATCHING.COMPLETE_DELAY)

      return () => clearTimeout(timer)
    }
  }, [isCompleted, onComplete, matchedPairs, totalPairs])

  // Ïπ¥Îìú Îß§Ïπ≠ Î°úÏßÅ
  const checkMatch = useCallback(
    (card1: CardItem, card2: CardItem): boolean => {
      const isFrontBack =
        card1.id.startsWith('front-') && card2.id.startsWith('back-')
      const isBackFront =
        card1.id.startsWith('back-') && card2.id.startsWith('front-')

      return (
        (isFrontBack || isBackFront) &&
        card1.uppercase === card2.uppercase &&
        card1.lowercase === card2.lowercase
      )
    },
    [],
  )

  // Ïπ¥Îìú ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨
  const handleCardClick = useCallback(
    (cardId: string) => {
      if (gamePhase !== 'playing') return

      const clickedCard = cards.find((card) => card.id === cardId)
      if (!clickedCard || clickedCard.isFlipped || clickedCard.isMatched) return

      if (selectedCards.length === 0) {
        // Ï≤´ Î≤àÏß∏ Ïπ¥Îìú ÏÑ†ÌÉù
        setCards((prev) =>
          prev.map((card) =>
            card.id === cardId ? { ...card, isFlipped: true } : card,
          ),
        )
        setSelectedCards([clickedCard])
      } else if (selectedCards.length === 1) {
        // Îëê Î≤àÏß∏ Ïπ¥Îìú ÏÑ†ÌÉù
        setCards((prev) =>
          prev.map((card) =>
            card.id === cardId ? { ...card, isFlipped: true } : card,
          ),
        )

        const firstCard = selectedCards[0]
        const secondCard = clickedCard

        // Îß§Ïπ≠ ÌôïÏù∏
        setTimeout(() => {
          const isMatch = checkMatch(firstCard, secondCard)

          if (isMatch) {
            // Îß§Ïπ≠ ÏÑ±Í≥µ
            console.log('‚úÖ Ïπ¥Îìú Îß§Ïπ≠ ÏÑ±Í≥µ!', {
              firstCard: firstCard.uppercase + firstCard.lowercase,
              secondCard: secondCard.uppercase + secondCard.lowercase,
              currentMatched: matchedPairs,
              willBe: matchedPairs + 1,
              totalPairs,
            })

            setCards((prev) =>
              prev.map((card) =>
                card.id === firstCard.id || card.id === secondCard.id
                  ? { ...card, isMatched: true }
                  : card,
              ),
            )
            setMatchedPairs((prev) => {
              const newCount = prev + 1
              console.log(`üî¢ matchedPairs ÏóÖÎç∞Ïù¥Ìä∏: ${prev} ‚Üí ${newCount}`)
              return newCount
            })
            onCorrect?.()
          } else {
            // Îß§Ïπ≠ Ïã§Ìå® - Ïπ¥Îìú Îã§Ïãú Îí§ÏßëÍ∏∞
            setCards((prev) =>
              prev.map((card) =>
                card.id === firstCard.id || card.id === secondCard.id
                  ? { ...card, isFlipped: false }
                  : card,
              ),
            )
            onIncorrect?.()
          }

          setSelectedCards([])
        }, TIMING.CARD_MATCHING.MATCH_DELAY)
      }
    },
    [cards, selectedCards, gamePhase, onCorrect, onIncorrect, checkMatch],
  )

  return {
    cards,
    selectedCards,
    gamePhase,
    matchedPairs,
    totalPairs,
    isCompleted,
    handleCardClick,
  }
}
